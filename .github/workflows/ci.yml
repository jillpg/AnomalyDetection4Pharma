name: CI

on:
  push:
  pull_request:

jobs:
  unit:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: testing
      AWS_SECRET_ACCESS_KEY: testing
      AWS_REGION: us-east-1
      BUCKET_NAME: test-bucket
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install moto[all]
      - name: Run unit tests
        run: pytest -m unit --maxfail=1 --disable-warnings -q

  notebooks_smoke:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/pull/')
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install notebook tooling
        run: pip install jupyter nbconvert
      - name: Smoke run lightweight notebooks if present
        run: |
          set -e
          for nb in notebooks/EDA_process.ipynb notebooks/EDA_all.ipynb; do
            if [ -f "$nb" ]; then
              echo "Executing $nb"
              jupyter nbconvert --to notebook --execute --inplace "$nb"
            else
              echo "Skipping missing notebook: $nb"
            fi
          done

  integration:
    runs-on: ubuntu-latest
    needs: unit
    env:
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
      BUCKET_NAME: test-bucket
      MINIO_ENDPOINT: http://localhost:9000
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Start MinIO (official image)
        run: |
          docker run -d --name minio \
            -p 9000:9000 -p 9001:9001 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio:latest server /data --console-address ":9001"
          for i in {1..30}; do
            if curl -fsS http://localhost:9000/minio/health/ready > /dev/null; then
              echo "MinIO is ready"; break; fi; echo "Waiting for MinIO..."; sleep 2; done
          curl -fsS http://localhost:9000/minio/health/ready >/dev/null
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Run integration tests
        run: pytest -m integration --maxfail=1 --disable-warnings -q
      - name: Stop MinIO
        if: always()
        run: docker rm -f minio || true
